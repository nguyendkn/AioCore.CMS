@using AioCore.Domain.AggregateModels.CategoryAggregate
@using AioCore.Domain
@using AioCore.Domain.AggregateModels.PostAggregate
<header>
    <div class="header-top wrapper">
    </div>
    <div class="header-bot wrapper">
        <div class="logo">
            <a class="logo-image" href="/">
                <img width="150" src="/images/logo.svg" alt="@Categories[0].Title">
            </a>
        </div>
        <div class="search-form">
            <input type="text" name="search" placeholder="Nhập từ khoá tìm kiếm..." autocomplete="off">
            <button type="button">
            </button>
        </div>
    </div>
    <div class="navigation">
        <ul class="navigation-bar wrapper">
            <li class="navigation-item">
                <a href="" class="title">
                    <i class="fa-solid fa-house"></i>
                </a>
            </li>
            @foreach (var category in Categories)
            {
                <li class="navigation-item">
                    <NavLink ActiveClass="active" class="title" Match="NavLinkMatch.All" href="@category.Slug">
                        @category.Title
                    </NavLink>
                </li>
            }
        </ul>
    </div>
    <div class="ads">
        <div class="wrapper">
            <div class="ads-code"></div>
        </div>
    </div>
</header>

@code {

    private List<Category> Categories { get; set; } = default!;
    private List<Post> Posts { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        Categories = AioCoreContext.CachedCategories.Select(x => x.Value)
            .Where(x => x.Title.Length < 10).DistinctBy(x => x.Title)
            .OrderBy(x => x.Title).Take(15).ToList();
        Posts = AioCoreContext.CachedPosts.Select(x => x.Value)
            .DistinctBy(x => x.Title).OrderByDescending(x => x.CreatedAt).ToList();

        return base.OnInitializedAsync();
    }

}